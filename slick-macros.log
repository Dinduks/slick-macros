object XDb extends scala.AnyRef { self => 
  object UserRights extends Enumeration {
    def <init>() = {
      super.<init>();
      ()
    };
    type UserRights = Value;
    val ADMIN = Value("ADMIN");
    val GUEST = Value("GUEST")
  };
  import scala.slick.util.TupleMethods._;
  import scala.slick.jdbc.JdbcBackend;
  import slickmacros.dao.Crud._;
  import slickmacros.Implicits._;
  import UserRights._;
  implicit val UserRightsTypeMapper = MappedColumnType.base[UserRights.Value, String](((it) => it.toString), ((id) => UserRights.withName(id)));
  case class Company extends scala.Product with scala.Serializable {
    def <init>(id: Option[Long], name: String, website: String) = {
      super.<init>();
      ()
    };
    def xid = id.getOrElse(throw new Exception("Object has no id yet"));
    <caseaccessor> <paramaccessor> val id: Option[Long] = _;
    <caseaccessor> <paramaccessor> val name: String = _;
    <caseaccessor> <paramaccessor> val website: String = _
  };
  class CompanyTable extends Table[Company] {
    def <init>(tag: Tag) = {
      super.<init>(tag, "company");
      ()
    };
    def id = column[Long]("id", O.PrimaryKey, O.AutoInc);
    def $times = scala.Tuple3(id.$qmark, name, website).shaped.$less$greater(<empty> match {
      case scala.Tuple3((id @ _), (name @ _), (website @ _)) => Company(id, name, website)
    }, ((x: Company) => Some(scala.Tuple3(x.id, x.name, x.website))));
    def forInsert = scala.Tuple2(name, website).shaped.$less$greater(<empty> match {
      case scala.Tuple2((name @ _), (website @ _)) => Company(None, name, website)
    }, ((x: Company) => Some(scala.Tuple2(x.name, x.website))));
    def name = column[String]("name");
    def website = column[String]("website")
  };
  val companies = TableQuery[CompanyTable];
  case class Address extends Part with scala.Product with scala.Serializable {
    <caseaccessor> <paramaccessor> val num: Int = _;
    <caseaccessor> <paramaccessor> val road: String = _;
    <caseaccessor> <paramaccessor> val zip: String = _;
    def <init>(num: Int, road: String, zip: String) = {
      super.<init>();
      ()
    }
  };
  case class Member extends scala.Product with scala.Serializable {
    def <init>(id: Option[Long], login: String, rights: UserRights, addr: Address, companyId: Long, managerId: Option[Long]) = {
      super.<init>();
      ()
    };
    def xid = id.getOrElse(throw new Exception("Object has no id yet"));
    <caseaccessor> <paramaccessor> val id: Option[Long] = _;
    <caseaccessor> <paramaccessor> val login: String = _;
    <caseaccessor> <paramaccessor> val rights: UserRights = _;
    <caseaccessor> <paramaccessor> val addr: Address = _;
    <caseaccessor> <paramaccessor> val companyId: Long = _;
    <caseaccessor> <paramaccessor> val managerId: Option[Long] = _;
    def loadCompany(implicit session: JdbcBackend#SessionDef) = companies.where(((x$1) => x$1.id.$eq$eq$eq(companyId))).first;
    def loadManager(implicit session: JdbcBackend#SessionDef) = members.where(((x$1) => x$1.id.$eq$eq$eq(managerId))).firstOption
  };
  class MemberTable extends Table[Member] {
    def <init>(tag: Tag) = {
      super.<init>(tag, "member");
      ()
    };
    def id = column[Long]("id", O.PrimaryKey, O.AutoInc);
    def $times = scala.Tuple6(id.$qmark, login, rights, scala.Tuple3(num, road, zip), companyId, managerId).shaped.$less$greater(<empty> match {
      case scala.Tuple6((id @ _), (login @ _), (rights @ _), (addr @ _), (companyId @ _), (managerId @ _)) => Member(id, login, rights, Address.tupled.apply(addr), companyId, managerId)
    }, ((x: Member) => Some(scala.Tuple6(x.id, x.login, x.rights, Address.unapply(x.addr).get, x.companyId, x.managerId))));
    def forInsert = scala.Tuple5(login, rights, scala.Tuple3(num, road, zip), companyId, managerId).shaped.$less$greater(<empty> match {
      case scala.Tuple5((login @ _), (rights @ _), (addr @ _), (companyId @ _), (managerId @ _)) => Member(None, login, rights, Address.tupled.apply(addr), companyId, managerId)
    }, ((x: Member) => Some(scala.Tuple5(x.login, x.rights, Address.unapply(x.addr).get, x.companyId, x.managerId))));
    def login = column[String]("login", O.DBType("varchar(100)"));
    def rights = column[UserRights]("rights");
    def num = column[Int]("num");
    def road = column[String]("road");
    def zip = column[String]("zip");
    def companyId = column[Long]("company_id");
    def managerId = column[Option[Long]]("manager_id");
    def loginIndex = index("idx_member_login", login, true);
    def company = foreignKey("company_member2company", companyId, companies)(((x$1) => x$1.id), scala.slick.lifted.ForeignKeyAction.NoAction, scala.slick.lifted.ForeignKeyAction.NoAction);
    def manager = foreignKey("manager_member2member", managerId, members)(((x$1) => x$1.id), scala.slick.lifted.ForeignKeyAction.NoAction, scala.slick.lifted.ForeignKeyAction.Cascade)
  };
  val members = TableQuery[MemberTable];
  case class Project extends scala.Product with scala.Serializable {
    def <init>(id: Option[Long], name: String, companyId: Long) = {
      super.<init>();
      ()
    };
    def xid = id.getOrElse(throw new Exception("Object has no id yet"));
    <caseaccessor> <paramaccessor> val id: Option[Long] = _;
    <caseaccessor> <paramaccessor> val name: String = _;
    <caseaccessor> <paramaccessor> val companyId: Long = _;
    def loadCompany(implicit session: JdbcBackend#SessionDef) = companies.where(((x$1) => x$1.id.$eq$eq$eq(companyId))).first;
    def loadMembers = self.project2Members.withFilter(((x) => x.projectId.$eq$eq$eq(id))).flatMap(((x) => self.members.withFilter(((y) => x.memberId.$eq$eq$eq(y.id))).map(((y) => y))));
    def addMember(memberId: Long)(implicit session: JdbcBackend#SessionDef) = project2Members.insert(Project2Member(xid, memberId))
  };
  class ProjectTable extends Table[Project] {
    def <init>(tag: Tag) = {
      super.<init>(tag, "project");
      ()
    };
    def id = column[Long]("id", O.PrimaryKey, O.AutoInc);
    def $times = scala.Tuple3(id.$qmark, name, companyId).shaped.$less$greater(<empty> match {
      case scala.Tuple3((id @ _), (name @ _), (companyId @ _)) => Project(id, name, companyId)
    }, ((x: Project) => Some(scala.Tuple3(x.id, x.name, x.companyId))));
    def forInsert = scala.Tuple2(name, companyId).shaped.$less$greater(<empty> match {
      case scala.Tuple2((name @ _), (companyId @ _)) => Project(None, name, companyId)
    }, ((x: Project) => Some(scala.Tuple2(x.name, x.companyId))));
    def name = column[String]("name");
    def companyId = column[Long]("company_id");
    def company = foreignKey("company_project2company", companyId, companies)(((x$1) => x$1.id), scala.slick.lifted.ForeignKeyAction.NoAction, scala.slick.lifted.ForeignKeyAction.NoAction)
  };
  val projects = TableQuery[ProjectTable];
  case class Project2Member extends scala.Product with scala.Serializable {
    def <init>(projectId: Long, memberId: Long) = {
      super.<init>();
      ()
    };
    <caseaccessor> <paramaccessor> val projectId: Long = _;
    <caseaccessor> <paramaccessor> val memberId: Long = _;
    def loadProject(implicit session: JdbcBackend#SessionDef) = projects.where(((x$1) => x$1.id.$eq$eq$eq(projectId))).first;
    def loadMember(implicit session: JdbcBackend#SessionDef) = members.where(((x$1) => x$1.id.$eq$eq$eq(memberId))).first
  };
  class Project2MemberTable extends Table[Project2Member] {
    def <init>(tag: Tag) = {
      super.<init>(tag, "project2_member");
      ()
    };
    def $times = scala.Tuple2(projectId, memberId).shaped.$less$greater(<empty> match {
      case scala.Tuple2((projectId @ _), (memberId @ _)) => Project2Member(projectId, memberId)
    }, ((x: Project2Member) => Some(scala.Tuple2(x.projectId, x.memberId))));
    def projectId = column[Long]("project_id");
    def memberId = column[Long]("member_id");
    def project = foreignKey("project_project2member2project", projectId, projects)(((x$1) => x$1.id), scala.slick.lifted.ForeignKeyAction.NoAction, scala.slick.lifted.ForeignKeyAction.NoAction);
    def member = foreignKey("member_project2member2member", memberId, members)(((x$1) => x$1.id), scala.slick.lifted.ForeignKeyAction.NoAction, scala.slick.lifted.ForeignKeyAction.NoAction)
  };
  val project2Members = TableQuery[Project2MemberTable];
  def <init>() = {
    super.<init>();
    ()
  }
}